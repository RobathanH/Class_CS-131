The ambiguous puzzle I found was:

C = counts([1,2,2,4],[4,2,2,1],[1,2,2,4],[4,2,2,1])

T1 = 	[[4,3,2,1],
	 [3,1,4,2],
	 [2,4,1,3],
	 [1,2,3,4]]

T2 = 	[[4,3,2,1],
	 [3,4,1,2],
	 [2,1,4,3],
	 [1,2,3,4]]



Speedup:
	My test case is querying my tower predicates to find a solution with 
	N = 4 and C = count([1,2,2,4],[4,2,2,1],[1,2,2,3],[3,2,2,1]).
	The speedup factor averaged at about 10000, concretely demonstrating 
	that the finite domain solver is much faster than simply enumerating 
	all possible solutions and backtracking at dead-ends.
